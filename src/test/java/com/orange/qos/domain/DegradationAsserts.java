package com.orange.qos.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DegradationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDegradationAllPropertiesEquals(Degradation expected, Degradation actual) {
        assertDegradationAutoGeneratedPropertiesEquals(expected, actual);
        assertDegradationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDegradationAllUpdatablePropertiesEquals(Degradation expected, Degradation actual) {
        assertDegradationUpdatableFieldsEquals(expected, actual);
        assertDegradationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDegradationAutoGeneratedPropertiesEquals(Degradation expected, Degradation actual) {
        assertThat(actual)
            .as("Verify Degradation auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDegradationUpdatableFieldsEquals(Degradation expected, Degradation actual) {
        assertThat(actual)
            .as("Verify Degradation relevant properties")
            .satisfies(a -> assertThat(a.getNumero()).as("check numero").isEqualTo(expected.getNumero()))
            .satisfies(a -> assertThat(a.getLocalite()).as("check localite").isEqualTo(expected.getLocalite()))
            .satisfies(a -> assertThat(a.getContactTemoin()).as("check contactTemoin").isEqualTo(expected.getContactTemoin()))
            .satisfies(a -> assertThat(a.getTypeAnomalie()).as("check typeAnomalie").isEqualTo(expected.getTypeAnomalie()))
            .satisfies(a -> assertThat(a.getPriorite()).as("check priorite").isEqualTo(expected.getPriorite()))
            .satisfies(a -> assertThat(a.getProblem()).as("check problem").isEqualTo(expected.getProblem()))
            .satisfies(a -> assertThat(a.getPorteur()).as("check porteur").isEqualTo(expected.getPorteur()))
            .satisfies(a -> assertThat(a.getActionsEffectuees()).as("check actionsEffectuees").isEqualTo(expected.getActionsEffectuees()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDegradationUpdatableRelationshipsEquals(Degradation expected, Degradation actual) {
        assertThat(actual)
            .as("Verify Degradation relationships")
            .satisfies(a -> assertThat(a.getUtilisateur()).as("check utilisateur").isEqualTo(expected.getUtilisateur()))
            .satisfies(a -> assertThat(a.getSite()).as("check site").isEqualTo(expected.getSite()));
    }
}
